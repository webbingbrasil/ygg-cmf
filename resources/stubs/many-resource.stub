<?php

namespace DummyNamespace;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Http\Request;
use Illuminate\Support\Arr;
use Ygg\Resource\Entities\ManyResource;
use Ygg\Resource\Http\Filters\CreatedFilter;
use Ygg\Resource\Http\Filters\SearchFilter;
use Ygg\Resource\Http\Filters\StatusFilter;
use Ygg\Resource\Models\Category;
use Ygg\Screen\Fields\Tags;
use Ygg\Screen\Fields\Input;
use Ygg\Screen\Fields\Select;
use Ygg\Screen\Fields\TextArea;
use Ygg\Screen\Fields\TinyMCE;
use Ygg\Screen\Fields\Upload;
use Ygg\Screen\TD;

class DummyClass extends ManyResource
{
    /**
     * @var string
     */
    public $name = '{{title}}';

    /**
     * @var string
     */
    public $description = '{{description}}';

    /**
     * @var string
     */
    public $slug = '{{slug}}';

    /**
     * Slug url /news/{name}.
     *
     * @var string
     */
    public $slugFields = 'title';

    /**
     * Menu tile name.
     *
     * @var null
     */
    public $title = '{{menu}}';

    /**
     * @param \Illuminate\Database\Eloquent\Model $model
     *
     * @return \Illuminate\Database\Eloquent\Model
     */
    public function create(Model $model): Model
    {
        return $model->load(['attachment', 'tags', 'taxonomies'])
            ->setAttribute('category', $model->taxonomies->map(function ($item) {
                return $item->id;
            })->toArray());
    }

    /**
     * @param Model $model
     * @param Request $request
     */
    public function save(Model $model, Request $request)
    {
        $model
            ->fill($request->all())
            ->fill([
                'type' => $this->slug,
                'author_id' => $request->user()->id,
                'options' => $model->getOptions(),
            ]);
        $model->save();

        $model->taxonomies()->sync(Arr::flatten(request(['category'])));
        $model->setTags(request('tags', []));
        $model->attachment()->sync(request('attachment', []));
    }

    /**
     * Rules Validation.
     *
     * @return array
     */
    public function rules(): array
    {
        return [
            'id'             => 'sometimes|integer|unique:posts',
            'content.title' => 'required|string',
            'content.description' => 'required|string',
            'content.body' => 'required|string',
        ];
    }

    /**
     * HTTP data filters.
     *
     * @return array
     */
    public function filters(): array
    {
        return [
            StatusFilter::class,
            SearchFilter::class,
            CreatedFilter::class,
        ];
    }

    /**
     * @return array
     */
    public function fields(): array
    {
        return [

            Input::make('title')
                ->type('text')
                ->max(255)
                ->required()
                ->title('Title')
                ->help('Aticle title'),

            TextArea::make('description')
                ->max(255)
                ->rows(5)
                ->required()
                ->title('Short Description'),

            TinyMCE::make('body')
                ->required()
                ->title('Content')
                ->help('Article content'),
        ];
    }

    /**
     * @return array
     * @throws \Throwable
     * @throws \Ygg\Resource\Exceptions\EntityTypeException
     */
    public function main(): array
    {
        return array_merge(parent::main(), [
            Select::make('category.')
                ->options(function () {
                    $options = (new Category())->getAllCategories();

                    return array_replace([0=> __('Without category')], $options);
                })
                ->multiple()
                ->title('Category')
                ->help('Select category'),

            Tags::make('tags')
                ->title('Tags')
                ->help('Keywords'),

            Upload::make('attachment')
                ->groups('feature_image')
                ->media(true)
                ->maxFiles(1)
                ->acceptedFiles('image/png,image/jpg')
                ->multiple(false)
                ->title('Feature Image'),
        ]);
    }

    /**
     * @throws \Throwable
     *
     * @return array
     */
    public function options(): array
    {
        return [
            Input::make('seo_title')
                ->type('text')
                ->max(255)
                ->required()
                ->title('SEO Title'),

            TextArea::make('seo_description')
                ->max(255)
                ->rows(5)
                ->required()
                ->title('SEO Description'),
        ];
    }

    /**
     * Grid View for post type.
     */
    public function grid(): array
    {
        return [
            TD::set('id', 'ID')
                ->align(TD::ALIGN_CENTER)
                ->width('100px')
                ->filter('numeric')
                ->sort()
                ->linkResource('View'),

            TD::set('name', 'Name')
                ->width('250px')
                ->column('content.title')
                ->filter('text')
                ->sort(),

            TD::set('status')
                ->sort(),

            TD::set('publish_at', 'Date of publication')
                ->filter('date')
                ->sort()
                ->align(TD::ALIGN_RIGHT)
                ->render(function ($item) {
                    return optional($item->publish_at)->toDateString();
                }),

            TD::set('created_at', 'Date of creation')
                ->filter('date')
                ->align(TD::ALIGN_RIGHT)
                ->sort()
                ->render(function ($item) {
                    return $item->created_at->toDateString();
                }),
        ];
    }
}
